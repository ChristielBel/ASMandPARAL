#include <iostream>
#include <time.h>
#include <omp.h>
#include <random>
#include <chrono>
#include <vector>
using namespace std;

const double EPS = 1e-8;

bool solveLinearSystem(vector <vector<double>>& A)
{
    int matrix_size = A.size();
    vector <vector<double>> T(matrix_size, vector<double>(matrix_size));

    for (int i = 0; i < matrix_size; i++)
    {
        for (int j = 0; j < matrix_size; j++)
        {
            if (i == j) T[i][j] = 1.0;
            else T[i][j] = 0.0;
        }
    }

    for (int k = 0; k < matrix_size; k++)
    {
        if (abs(A[k][k]) < EPS)
        {
            bool flag = false;

            for (int i = k + 1; i < matrix_size; i++)
            {
                if (abs(A[i][k]) > EPS)
                {
                    swap(A[k], A[i]);
                    swap(T[k], T[i]);
                    flag = true;
                    break;
                }
            }

            if (!flag)
                return false;
        }

        double temp = A[k][k];

#pragma omp parallel
        {
#pragma omp for
            for (int j = 0; j < matrix_size; j++)
            {
                A[k][j] /= temp;
                T[k][j] /= temp;
            }
        }

#pragma omp parallel
        {
#pragma omp for
            for (int i = k + 1; i < matrix_size; i++)
            {
                double temp = A[i][k];


                for (int j = 0; j < matrix_size; j++)
                {
                    A[i][j] -= temp * A[k][j];
                    T[i][j] -= temp * T[k][j];
                }
            }
        }
    }

    for (int k = matrix_size - 1; k > 0; k--)
    {
#pragma omp parallel
        {
#pragma omp for
            for (int i = k - 1; i > -1; i--)
            {
                double temp = matrix[i][k];

                for (int j = 0; j < matrix_size; j++)
                {
                    A[i][j] -= temp * A[k][j];
                    T[i][j] -= temp *T[k][j];
                }
            }
        }
    }
    A = T;
    return true;
}

double generate_random_number(const int min, const int max)
{
    random_device rd;
    mt19937 gen(rd());
    uniform_real_distribution<double> dis(min, max);
    return dis(gen);
}

int main()
{
    srand(time(NULL));
    int n;
    cout << "Enter the number of equations and variables (n): ";
    cin >> n;

    vector<vector<double>> A(n, vector<double>(n));
    vector<double> B(n);

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
            A[i][j] = generate_random_number(0, 100);
        B[i] = generate_random_number(0, 100);
    }

    auto start_time = chrono::high_resolution_clock::now();

    if (!solveLinearSystem(A))
    {
        cout << "Error!\n";
        exit(1);
    }

    vector<double> X(n);
#pragma omp parallel
    {
#pragma omp for
        for (int i = 0; i < n; i++)
        {
            X[i] = 0;
            for (int j = 0; j < n; j++)
                X[i] += A[i][j] * B[j];
        }
    }

    auto end_time = chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end_time - start_time);
    cout << "Time: " << duration.count() << " microseconds";

    return 0;
}
